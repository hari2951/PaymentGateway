@page "/sales"
@rendermode InteractiveServer

@using ProductReport.Features.Sales.ViewModels
@using ProductReport.Features.Sales.Utilities
@inject SalesViewModel ViewModel
@implements IDisposable

<PageTitle>Sales Report</PageTitle>

<div class="container-fluid">
    <h2 class="mb-4">Sales Report</h2>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Upload Sales Data</h5>
                    <div class="d-flex gap-3 align-items-center">
                        <InputFile OnChange="@OnFileSelected" class="form-control" accept=".csv" disabled="@ViewModel.IsLoading" />
                        <button class="btn btn-primary" @onclick="@LoadDefaultData" disabled="@ViewModel.IsLoading">
                            @if (ViewModel.IsLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Loading...</span>
                            }
                            else
                            {
                                <span>Load Sample Data</span>
                            }
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            @ViewModel.ErrorMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-4">
            <select class="form-select" @bind="ViewModel.SelectedSegment">
                <option value="">All Segments</option>
                @foreach (var segment in ViewModel.Segments)
                {
                    <option value="@segment">@segment</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="ViewModel.SelectedCountry">
                <option value="">All Countries</option>
                @foreach (var country in ViewModel.Countries)
                {
                    <option value="@country">@country</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="ViewModel.SelectedProduct">
                <option value="">All Products</option>
                @foreach (var product in ViewModel.Products)
                {
                    <option value="@product">@product</option>
                }
            </select>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Summary</h5>
            <div class="row">
                <div class="col-md-3">
                    <div class="card bg-light">
                        <div class="card-body">
                            <h6>Total Units Sold</h6>
                            <h3>@ViewModel.TotalUnitsSold</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-light">
                        <div class="card-body">
                            <h6>Total Manufacturing Cost</h6>
                            <h3>@ViewModel.TotalManufacturingPrice.ToString("C")</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-light">
                        <div class="card-body">
                            <h6>Total Sales</h6>
                            <h3>@ViewModel.TotalSalePrice.ToString("C")</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-light">
                        <div class="card-body">
                            <h6>Total Profit/Loss</h6>
                            <h3 class="@(ViewModel.TotalProfitLoss >= 0 ? "text-success" : "text-danger")">
                                @ViewModel.TotalProfitLoss.ToString("C")
                            </h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th @onclick="@(() => ViewModel.SortBy("Date"))" style="cursor: pointer">
                        Date <i class="bi @ViewModel.GetSortIcon("Date")"></i>
                    </th>
                    <th @onclick="@(() => ViewModel.SortBy("Segment"))" style="cursor: pointer">
                        Segment <i class="bi @ViewModel.GetSortIcon("Segment")"></i>
                    </th>
                    <th @onclick="@(() => ViewModel.SortBy("Country"))" style="cursor: pointer">
                        Country <i class="bi @ViewModel.GetSortIcon("Country")"></i>
                    </th>
                    <th @onclick="@(() => ViewModel.SortBy("Product"))" style="cursor: pointer">
                        Product <i class="bi @ViewModel.GetSortIcon("Product")"></i>
                    </th>
                    <th @onclick="@(() => ViewModel.SortBy("UnitsSold"))" style="cursor: pointer">
                        Units Sold <i class="bi @ViewModel.GetSortIcon("UnitsSold")"></i>
                    </th>
                    <th @onclick="@(() => ViewModel.SortBy("ManufacturingPrice"))" style="cursor: pointer">
                        Manufacturing Price <i class="bi @ViewModel.GetSortIcon("ManufacturingPrice")"></i>
                    </th>
                    <th @onclick="@(() => ViewModel.SortBy("SalePrice"))" style="cursor: pointer">
                        Sale Price <i class="bi @ViewModel.GetSortIcon("SalePrice")"></i>
                    </th>
                    <th @onclick="@(() => ViewModel.SortBy("ProfitLoss"))" style="cursor: pointer">
                        Profit/Loss <i class="bi @ViewModel.GetSortIcon("ProfitLoss")"></i>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in ViewModel.SalesRecords)
                {
                    <tr>
                        <td>@record.Date.ToShortDateString()</td>
                        <td>@record.Segment</td>
                        <td>@record.Country</td>
                        <td>@record.Product</td>
                        <td>@record.UnitsSold</td>
                        <td>@PriceUtils.Sanitize(record.ManufacturingPrice)</td>
                        <td>@record.SalePrice</td>
                        <td class="@(record.ProfitLoss >= 0 ? "text-success" : "text-danger")">
                            @record.ProfitLoss.ToString("C")
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-between align-items-center mt-3">
            <div class="d-flex align-items-center gap-2">
                <span>Rows per page:</span>
                <select class="form-select form-select-sm" style="width: auto;" @bind="ViewModel.PageSize">
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </div>

            <div class="d-flex align-items-center gap-2">
                <span>Page @ViewModel.CurrentPage of @ViewModel.TotalPages</span>
                <nav aria-label="Page navigation">
                    <ul class="pagination mb-0">
                        <li class="page-item @(!ViewModel.HasPreviousPage ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ViewModel.PreviousPage()" disabled="@(!ViewModel.HasPreviousPage)">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                        </li>
                        @{
                            var startPage = Math.Max(1, ViewModel.CurrentPage - 2);
                            var endPage = Math.Min(ViewModel.TotalPages, startPage + 4);
                            startPage = Math.Max(1, endPage - 4);
                        }
                        @if (startPage > 1)
                        {
                            <li class="page-item">
                                <button class="page-link" @onclick="() => ViewModel.GoToPage(1)">1</button>
                            </li>
                            @if (startPage > 2)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                        }
                        @for (var i = startPage; i <= endPage; i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(pageNumber == ViewModel.CurrentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => ViewModel.GoToPage(pageNumber)">@pageNumber</button>
                            </li>
                        }
                        @if (endPage < ViewModel.TotalPages)
                        {
                            @if (endPage < ViewModel.TotalPages - 1)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                            <li class="page-item">
                                <button class="page-link" @onclick="() => ViewModel.GoToPage(ViewModel.TotalPages)">@ViewModel.TotalPages</button>
                            </li>
                        }
                        <li class="page-item @(!ViewModel.HasNextPage ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ViewModel.NextPage()" disabled="@(!ViewModel.HasNextPage)">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        ViewModel.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ViewModel.OnChange -= StateHasChanged;
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        await ViewModel.ProcessUploadedFileAsync(e.File);
    }

    private void LoadDefaultData()
    {
        ViewModel.LoadDefaultData();
    }
} 